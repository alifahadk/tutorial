// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the a_process namespace.
//
// To instantiate the a_process namespace, first call [New_a_process] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"blueprint/goproc/a_process/tutorial"
	"github.com/blueprint-uservices/tutorial/examples/helloworld/workflow/servicea"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"blueprint/goproc/a_process/http"
	"github.com/blueprint-uservices/tutorial/examples/helloworld/workflow/serviceb"
)

// Initializes the a_process namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_a_process(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_a_process_Args(b)
	set_a_process_Instances(b)
	set_a_process_Definitions(b)
	return b
}

// a_process requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   a_service.http.bind_addr
//   b_service.http.dial_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_a_process_Args(b *golang.NamespaceBuilder) {
	b.Required("a_service.http.bind_addr", "Argument generated by Blueprint IR: a_service.http.bind_addr = AddressConfig()")
	b.Required("b_service.http.dial_addr", "Argument generated by Blueprint IR: b_service.http.dial_addr = AddressConfig()")
}

// When the a_process namespace is built it will automatically instantiate
// the following nodes:
//   a_process.stdoutmetriccollector
//   a_process.logger
//   b_service.http_client
//   b_service.hello.instrument.client
//   b_service.client
//   a_service
//   a_service.hello.instrument.server
//   a_service.http_server
func set_a_process_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("a_process.stdoutmetriccollector")
	b.Instantiate("a_process.logger")
	b.Instantiate("b_service.http_client")
	b.Instantiate("b_service.hello.instrument.client")
	b.Instantiate("b_service.client")
	b.Instantiate("a_service")
	b.Instantiate("a_service.hello.instrument.server")
	b.Instantiate("a_service.http_server")
}

// The a_process namespace contains definitions for instantiating
// the following nodes:
//   a_process.logger
//   a_process.stdoutmetriccollector
//   a_service
//   a_service.hello.instrument.server
//   a_service.http_server
//   b_service.client
//   b_service.hello.instrument.client
//   b_service.http_client
func set_a_process_Definitions(b *golang.NamespaceBuilder) {
	b.Define("a_process.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("a_process.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
	b.Define("a_service", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var serviceB serviceb.ServiceB
		if err := n.Get("b_service.client", &serviceB); err != nil {
			return nil, err
		}
		
		return servicea.NewServiceA(n.Context(), serviceB)
	})
	
	b.Define("a_service.hello.instrument.server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service servicea.ServiceA
		if err := n.Get("a_service", &service); err != nil {
			return nil, err
		}
		
		return tutorial.New_ServiceA_TutorialInstrumentServerWrapper(n.Context(), service)
	})
	
	b.Define("a_service.http_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service servicea.ServiceA
		if err := n.Get("a_service.hello.instrument.server", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("a_service.http.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return http.New_ServiceA_HTTPServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("b_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client serviceb.ServiceB
		err := n.Get("b_service.hello.instrument.client", &client)
		return client, err
	})
	
	b.Define("b_service.hello.instrument.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service serviceb.ServiceB
		if err := n.Get("b_service.http_client", &service); err != nil {
			return nil, err
		}
		
		return tutorial.New_ServiceB_TutorialInstrumentClientWrapper(n.Context(), service)
	})
	
	b.Define("b_service.http_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("b_service.http.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return http.New_ServiceB_HTTPClient(n.Context(), addr)
	})
	
}
