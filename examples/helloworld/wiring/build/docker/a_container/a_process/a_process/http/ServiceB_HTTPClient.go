// Blueprint: Auto-generated by the HTTP Plugin
package http

import (
	"net/http"
	"encoding/json"
	"context"
	"time"
	"net/url"
	"fmt"
	"io"
)

type ServiceB_HTTPClient struct {
	Client *http.Client
	Timeout time.Duration
	ServerAddress string
}

func New_ServiceB_HTTPClient(ctx context.Context, serverAddress string) (*ServiceB_HTTPClient, error) {
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	client := &http.Client{
		Timeout: duration,
	}
	c := &ServiceB_HTTPClient{}
	c.Client = client
	c.Timeout = duration
	c.ServerAddress = "http://" + serverAddress
	return c, nil
}


func (client *ServiceB_HTTPClient) Join(ctx context.Context) (err error) {
	vals := url.Values{}
	

	encoded_url, err := url.Parse(client.ServerAddress + "/Join")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	return
}

