// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
	"github.com/blueprint-uservices/tutorial/examples/helloworld/workflow/serviceb"
	"context"
)

type ServiceB_HTTPServerHandler struct {
	Service serviceb.ServiceB
	Address string
}

func New_ServiceB_HTTPServerHandler(ctx context.Context, service serviceb.ServiceB, serverAddress string) (*ServiceB_HTTPServerHandler, error) {
	handler := &ServiceB_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *ServiceB_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/Join").HandlerFunc(handler.Join)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *ServiceB_HTTPServerHandler) Join(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	ctx := context.Background()
	err = handler.Service.Join(ctx)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

