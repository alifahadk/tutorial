// Blueprint: Auto-generated by Tutorial Plugin
package tutorial

import (
	"github.com/blueprint-uservices/tutorial/examples/helloworld/workflow/serviceb"
	"context"
	"log"
	"fmt"
)


type Job struct {
	Method          func (context.Context) error
	Context        	context.Context
	Done            chan struct{} 
}

func StartWorkerPool(workerCount, queueSize int) chan Job {
	jobQueue := make(chan Job, queueSize)

	for i := 1; i <= workerCount; i++ {
		go func(id int, jobs <-chan Job) { //Read-only channel using <-chan Job instead of chan Job
			for job := range jobs {
				err:=job.Method(job.Context)
				if err!=nil {
					fmt.Println("Error when executing job:",err)
				} else {
                    fmt.Println("Job executed successfully")
                }
				close(job.Done)
			}
		}(i, jobQueue)
	}

	return jobQueue
}
type ServiceB_TutorialInstrumentServerWrapper struct {
	Service serviceb.ServiceB
	Queue chan Job
}

func New_ServiceB_TutorialInstrumentServerWrapper(ctx context.Context, service serviceb.ServiceB) (*ServiceB_TutorialInstrumentServerWrapper, error) {
	handler := &ServiceB_TutorialInstrumentServerWrapper{}
	handler.Service = service
	handler.Queue = StartWorkerPool(4,10)
	return handler, nil
}


func (handler *ServiceB_TutorialInstrumentServerWrapper) Join(ctx context.Context) (error) {
	log.Println("Processing Join")

	done := make(chan struct{})
	job := Job{Method: handler.Service.Join, Context:ctx, Done:done}

	select {
	case handler.Queue <- job:
		<-done // Wait for job to complete
		return nil
	default:
		return nil
	}
	return handler.Service.Join(ctx)
}

